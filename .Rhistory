###################################################################
#################################################
### Find all files in clean csv version folders
### creates an array with all of the csv file names
#################################################
names.csv <- rownames(file.info(list.files("../../Sample Intake files/csv versions/", pattern = "*.csv", full.names = T)))
## Remove files that were not included in origin#
### not sure what this does or why it's needed
# we should just change the file name if needed??
names.csv <- names.csv[!grepl(pattern = "SPIKE-IN|2019.07.12", names.csv)]
#################################################
### Extract dates from csv files
### creates an empty array and then fills using the extract.date function
### input for this function is the names.csv array created above
#################################################
dates <- c()
suppressWarnings(
for (i in 1:length(names.csv)) {
dates[i] <- extract.date(names.csv[i])
}
)
# Manually add date for files without dates #
##
## Update 9/3/19: 6 csv file dates need to be added manually - AM
# maybe we can just fix the filenames??
# just check if there are any NAs and then stop
if (length(dates[is.na(dates)]) > 6) {
stop("Module Sample Intake: There are new csv files with dates that were unable to be extracted. Please manually add dates below")
}
dates[is.na(dates)] <-
c(
"20190602",
"20190501_Dourados",
"08192019_Exp31",
"08202019_Exp31",
"08262019_Exp31",
"20190308"
)
# paste the letter B at positions where the dates are duplicated?
# Does this mean it's a second sample intake for that day?
dates[duplicated(dates)] <- paste(dates[duplicated(dates)], "B", sep = "")
#################################################
############ Create dataframe names #############
#################################################
# empty array/vector
df.names <- c()
# appends "Sample.intake" to the dates extracted from the file names
for (i in 1:length(names.csv)) {
df.names[i] <- name.file(date = dates[i])
}
#################################################
############### Read in csv files ###############
#################################################
suppressWarnings(
for (i in 1:length(names.csv)) {
# iteratively open the csv files to bind together later
# also creates IntakeComment column
df <- read.csv.intake(file = names.csv[i], name = df.names[i])
# for the ith dataframe (saved as df) assign the ith name (saved as df.names[i] and inputted as an IntakeComment in dataframe)
assign(df.names[i], df)
}
)
## Adds all data frames in the global environment to list object list.df ##
list.df <- Filter(function(x) {
is(x, "data.frame")
}, mget(ls()))
# removes any objects from list.df that don't start with Sample.Intake
list.df <- list.df[startsWith(names(list.df), "Sample.intake")]
### confirm that names are the same ###
## Create vectors of data frames with matching columns and those with unmatching columns ##
# compares all dataframes in list.df to the first dataframe in list.df to see if they match
# may want to change this since none of the documents match the first document
# can't we just do a smartbind for all of them?
# match is a list and unmatch is  logical vector
match <- c()
suppressWarnings(
match <- lapply(list.df, col.match, list.df[[1]])
)
# only saves those values from match which are False
unmatch <- unlist(match)[unlist(match) == FALSE]
## Create matched column data frame list and unmatched
# names() returns the names of objects in the array
list.df.match <- list.df[!names(list.df) %in% names(unmatch)]
list.df.unmatch <- list.df[names(list.df) %in% names(unmatch)]
##########################################
##### Combine files into a list
##########################################
## Usual rbind for dataframes with matching columns ##
Combined_sample_intake_file <- do.call(rbind, list.df.match)
## Add unmatched columns data frames ##
suppressWarnings(for (i in 1:length(list.df.unmatch)) {
Combined_sample_intake_file <- smartbind(Combined_sample_intake_file, list.df.unmatch[[i]])
})
### save RData of the merged Sample Intake files results
# save(Combined_sample_intake_file, file = paste(path_save, "Combined sample intake file.RData", sep = ""))
# write.csv(Combined_sample_intake_file, file =  paste(path_save, "Combined sample intake file.csv", sevp = ""), row.names = FALSE)
###########################################################################################
####  Comfirm that every sample has a unique WL.num
# print("Are all WL.num unique?")
# if not all of the values in Combine_sample_intake_file return false in the call to duplicate() print error message
if (!all(duplicated(Combined_sample_intake_file$WL.num) == FALSE)) {
stop("Module Sample Intake: There are duplicated WL numbers. Please double check input files")
}
####  Comfirm that every sample has a unique Full.name
# print("Are all Full.name unique?")
# same idea as above
if (!all(duplicated(Combined_sample_intake_file$Full.name) == FALSE)) {
stop("Module Sample Intake: There are duplicated Full.names. Please double check input files")
}
library(xlsx)
install.packages("rJava")
library(rJava)
knitr::opts_chunk$set(echo = FALSE)
library(gmodels)
library(openxlsx)
library(reshape2)
library(dplyr)
source("sampleIntakeDataExtraction.R", chdir = T)
which(duplicated(sampleIntakeCombinedData$WL.num))
View(sampleIntakeCombinedData)
View(Sample.intake_20200213)
View(sampleIntakeCombinedData)
View(Sample.intake_20200316)
knitr::opts_chunk$set(echo = FALSE)
library(gmodels)
library(openxlsx)
library(reshape2)
library(dplyr)
source("sampleIntakeDataExtraction.R", chdir = T)
source("rnaDataExtraction.R")
source("ddpcrDataExtraction.R")
View(sampleIntakeCombinedData)
knitr::opts_chunk$set(echo = FALSE)
library(gmodels)
library(openxlsx)
library(reshape2)
library(dplyr)
source("sampleIntakeDataExtraction.R", chdir = T)
source("rnaDataExtraction.R")
source("ddpcrDataExtraction.R")
source("qpcrDataExtraction.R")
setwd("~/Documents/GitHub/CSPB4502_UFO_PresidentialElections")
ufo <- read.csv("ufo_elect_data_v2.csv")
View(ufo)
ufo <- ufo %>% select(time,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
library(ddplyr)
ufo <- ufo %>% select(time,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
library(tidyr)
ufo <- ufo %>% select(time,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
library(dplyr)
ufo <- ufo %>% select(time,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
library(dplyr)
library(tidyr)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv")
#select cols
ufo <- ufo %>% select(time,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes,
party)
View(ufo)
library(dplyr)
library(tidyr)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv")
#select cols
ufo <- ufo %>% select(party,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
ufo <- ufo[-which(is.na(ufo$party)),]
ufo <- read.csv("ufo_elect_data_v2.csv")
which(is.na(ufo$party))
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
library(dplyr)
library(tidyr)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
#select cols
ufo <- ufo %>% select(party,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
ufo <- ufo[-which(is.na(ufo$party)),]
unique(ufo$city)
sub("(.*)", "", ufo$city)
library(dplyr)
library(tidyr)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
#select cols
ufo <- ufo %>% select(party,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
ufo <- ufo[-which(is.na(ufo$party)),]
sub("/(.*/)", "", ufo$city)
test <- sub("/(.*/)", "", "phoenix (ahwatukee)")
test <- sub("\\(.*\\)", "", "phoenix (ahwatukee)")
test <- sub(" \\(.*\\)", "", "phoenix (ahwatukee)")
unique(ufo$city)
library(dplyr)
library(tidyr)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
#select cols
ufo <- ufo %>% select(party,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
ufo <- ufo[-which(is.na(ufo$party)),]
ufo$city <- sub(" \\(.*\\)", "", ufo$city)
unique(ufo$city)
length(unique(ufo$city))
library(dplyr)
library(tidyr)
#options(stringsAsFactors = FALSE)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
#select cols
ufo <- ufo %>% select(party,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
ufo <- ufo[-which(is.na(ufo$party)),]
ufo$city <- sub(" \\(.*\\)", "", ufo$city)
length(unique(ufo$city))
ufo$test <- as.numeric(ufo$city)
View(ufo)
library(dplyr)
library(tidyr)
#options(stringsAsFactors = FALSE)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
#select cols
ufo <- ufo %>% select(party,
last_election_year,
city,
state_x,
shape,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
ufo <- ufo[-which(is.na(ufo$party)),]
ufo$city <- sub(" \\(.*\\)", "", ufo$city)
length(unique(ufo$city))
ufo$test <- as.numeric(ufo$city)
View(ufo)
set.seed(12345)
a <- sample(ufo$city, 10, r=T)
a <- factor(ufo$city, levels = ufo$city)
a <- factor(ufo$city, levels = unique(ufo$city))
ufo$test <- as.integer(a)
paste(ufo$city, ufo$state_x, sep = ", ")
ufo$city <- paste(ufo$city, ufo$state_x, sep = ", ")
set.seed(12345)
a <- factor(ufo$city, levels = unique(ufo$city))
ufo$test <- as.integer(a)
a <- factor(ufo$shape, levels = unique(ufo$shape))
ufo$shaped <- as.integer(a)
library(dplyr)
library(tidyr)
#options(stringsAsFactors = FALSE)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
ufo <- ufo[-which(is.na(ufo$party)),]
ufo$city <- sub(" \\(.*\\)", "", ufo$city)
ufo$city <- paste(ufo$city, ufo$state_x, sep = ", ")
set.seed(12345)
a <- factor(ufo$city, levels = unique(ufo$city))
ufo$location <- as.integer(a)
a <- factor(ufo$shape, levels = unique(ufo$shape))
ufo$shaped <- as.integer(a)
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes)
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% rename("duration..seconds." = "duration")
library(plyr)
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% plyr::rename("duration..seconds." = "duration")
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% dplyr::rename("duration..seconds." = "duration")
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% dplyr::rename("duration" = "duration..seconds.")
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% dplyr::rename("duration" = "duration..seconds.")
library(dplyr)
library(tidyr)
library(plyr)
#options(stringsAsFactors = FALSE)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
ufo <- ufo[-which(is.na(ufo$party)),]
ufo$city <- sub(" \\(.*\\)", "", ufo$city)
ufo$city <- paste(ufo$city, ufo$state_x, sep = ", ")
set.seed(12345)
a <- factor(ufo$city, levels = unique(ufo$city))
ufo$location <- as.integer(a)
a <- factor(ufo$shape, levels = unique(ufo$shape))
ufo$shaped <- as.integer(a)
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% dplyr::rename("duration" = "duration",
"candidate_votes" = "candidatevotes",
"total_votes" = "totalvotes")
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% plyr::rename("duration" = "duration",
"candidate_votes" = "candidatevotes",
"total_votes" = "totalvotes")
library(dplyr)
library(tidyr)
library(plyr)
#options(stringsAsFactors = FALSE)
#read in data
ufo <- read.csv("ufo_elect_data_v2.csv", na.strings = c(""))
ufo <- ufo[-which(is.na(ufo$party)),]
ufo$city <- sub(" \\(.*\\)", "", ufo$city)
ufo$city <- paste(ufo$city, ufo$state_x, sep = ", ")
set.seed(12345)
a <- factor(ufo$city, levels = unique(ufo$city))
ufo$location <- as.integer(a)
a <- factor(ufo$shape, levels = unique(ufo$shape))
ufo$shaped <- as.integer(a)
#select cols
ufo <- ufo %>% select(party,
last_election_year,
location,
shaped,
duration..seconds.,
latitude,
longitude,
candidatevotes,
totalvotes) %>% dplyr::rename("duration" = "duration..seconds.",
"candidate_votes" = "candidatevotes",
"total_votes" = "totalvotes")
#covariance matrix
S <- cov(ufo[,2:ncol(ufo)])
as_tibble(ufo)
ufo$duration <- as.numeric(ufo$duration)
as_tibble(ufo)
S <- cov(ufo[,2:ncol(ufo)])
View(S)
S <- prcomp(ufo)
S <- prcomp(ufo[,2:ncol(ufo)])
ufo <- na.omit(ufo)
S <- prcomp(ufo[,2:ncol(ufo)])
View(S)
install.packages("factoextra")
install.packages("factoextra")
install.packages("factoextra")
library(dplyr)
library(tidyr)
library(plyr)
library(factoextra)
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/factoextra")
install.packages(c("ggExtra", "ggpubr"))
library(egg)
install.packages(c("ggExtra", "ggpubr"))
library(ggExtra)
library(gtools)
library(scales)
library(ggExtra)
library(ggpubr)
library(svglite)
library(gdtools)
library(ggplot2)
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
R. version
R version
R
install.packages(c("agricolae", "AlgDesign", "backports", "BH", "BiocManager", "bit", "bit64", "blob", "boot", "Cairo", "callr", "checkmate", "circlize", "class", "classInt", "cli", "clipr", "coda", "codetools", "colorspace", "covr", "cowplot", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "deldir", "devtools", "digest", "dslabs", "DT", "dtplyr", "e1071", "ellipsis", "expm", "fansi", "fBasics", "forcats", "Formula", "fs", "gdtools", "generics", "GetoptLong", "ggplot2", "gh", "git2r", "GlobalOptions", "gss", "gtools", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "IDPmisc", "jpeg", "jsonlite", "JuliaCall", "KernSmooth", "klaR", "knitr", "labeling", "labelled", "Lahman", "later", "lattice", "lubridate", "magrittr", "manipulateWidget", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "microbenchmark", "mime", "modelr", "mvtnorm", "nlme", "nnet", "nycflights13", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgconfig", "pkgload", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "questionr", "R6", "RcppArmadillo", "readr", "rematch2", "remotes", "reshape2", "reticulate", "rex", "rgl", "rJava", "rmarkdown", "RMySQL", "robustbase", "roxygen2", "rprojroot", "rrcov", "RSQLite", "rstudioapi", "rvest", "scales", "selectr", "sf", "shape", "shiny", "showtext", "showtextdb", "sp", "spatial", "spData", "spdep", "stringi", "styler", "survival", "svglite", "sys", "sysfonts", "testit", "testthat", "tidyverse", "tikzDevice", "timeSeries", "tinytex", "units", "usethis", "webshot", "whisker", "withr", "xfun", "xlsx", "XML", "xml2", "yaml", "zip"))
